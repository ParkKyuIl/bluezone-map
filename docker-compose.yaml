version: "3.8"

networks:
  pubg-net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - pubg-net

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA_LISTENERS}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - pubg-net

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_URL}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pubg-net

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - pubg-net

  pubg-scrapper:
    build: ./pubg-scrapper
    environment:
      - KAFKA_BOOTSTRAP_SERVERS= ${KAFKA_BOOTSTRAP_SERVER_URL}
    depends_on:
      - kafka
    restart: on-failure
    networks:
      - pubg-net

  erangel-service:
    build:
      context: ./erangel-service
      dockerfile: Dockerfile
    container_name: erangel-service
    restart: on-failure
    depends_on:
      - redis
      - postgres
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVER_URL}
      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD:  ${DB_PASSWORD}
    networks:
      - pubg-net

volumes:
  postgres-data:
